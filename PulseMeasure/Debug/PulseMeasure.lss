
PulseMeasure.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  00000888  0000091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000888  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800112  00800112  0000092e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001390  00000000  00000000  00000a6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae0  00000000  00000000  00001dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074e  00000000  00000000  000028dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001d4  00000000  00000000  0000302c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000679  00000000  00000000  00003200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000818  00000000  00000000  00003879  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00004091  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4d c0       	rjmp	.+154    	; 0xc8 <__vector_11>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e8       	ldi	r30, 0x88	; 136
  a0:	f8 e0       	ldi	r31, 0x08	; 8
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 31       	cpi	r26, 0x12	; 18
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e1       	ldi	r26, 0x12	; 18
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 31       	cpi	r26, 0x1D	; 29
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	5c d1       	rcall	.+696    	; 0x37c <main>
  c4:	df c3       	rjmp	.+1982   	; 0x884 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_11>:
#include <avr/interrupt.h>

static void (*PTR)(void) = NULL;

ISR(TIMER1_CAPT_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	0b b6       	in	r0, 0x3b	; 59
  d4:	0f 92       	push	r0
  d6:	2f 93       	push	r18
  d8:	3f 93       	push	r19
  da:	4f 93       	push	r20
  dc:	5f 93       	push	r21
  de:	6f 93       	push	r22
  e0:	7f 93       	push	r23
  e2:	8f 93       	push	r24
  e4:	9f 93       	push	r25
  e6:	af 93       	push	r26
  e8:	bf 93       	push	r27
  ea:	ef 93       	push	r30
  ec:	ff 93       	push	r31
	if(PTR)
  ee:	e0 91 12 01 	lds	r30, 0x0112	; 0x800112 <__data_end>
  f2:	f0 91 13 01 	lds	r31, 0x0113	; 0x800113 <__data_end+0x1>
  f6:	30 97       	sbiw	r30, 0x00	; 0
  f8:	09 f0       	breq	.+2      	; 0xfc <__vector_11+0x34>
	{
		PTR();
  fa:	09 95       	icall
	}
}
  fc:	ff 91       	pop	r31
  fe:	ef 91       	pop	r30
 100:	bf 91       	pop	r27
 102:	af 91       	pop	r26
 104:	9f 91       	pop	r25
 106:	8f 91       	pop	r24
 108:	7f 91       	pop	r23
 10a:	6f 91       	pop	r22
 10c:	5f 91       	pop	r21
 10e:	4f 91       	pop	r20
 110:	3f 91       	pop	r19
 112:	2f 91       	pop	r18
 114:	0f 90       	pop	r0
 116:	0b be       	out	0x3b, r0	; 59
 118:	0f 90       	pop	r0
 11a:	0f be       	out	0x3f, r0	; 63
 11c:	0f 90       	pop	r0
 11e:	1f 90       	pop	r1
 120:	18 95       	reti

00000122 <Icu_init>:

void 	Icu_init(Icu_Clock_t Icu_Clock)
{
	TCCR1A = 0;
 122:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = (1<<ICNC1)|(1<<ICES1)|(Icu_Clock);
 124:	80 6c       	ori	r24, 0xC0	; 192
 126:	8e bd       	out	0x2e, r24	; 46
	TCCR1C = (1<<FOC1A)|(1<<FOC1B)|(1<<FOC1C);
 128:	80 ee       	ldi	r24, 0xE0	; 224
 12a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
	TCNT1 = 0;
 12e:	1d bc       	out	0x2d, r1	; 45
 130:	1c bc       	out	0x2c, r1	; 44
	OCR1A = 0;
 132:	1b bc       	out	0x2b, r1	; 43
 134:	1a bc       	out	0x2a, r1	; 42
	ICR1 = 0;
 136:	17 bc       	out	0x27, r1	; 39
 138:	16 bc       	out	0x26, r1	; 38
	TIMSK = (1<<TICIE1);
 13a:	80 e2       	ldi	r24, 0x20	; 32
 13c:	87 bf       	out	0x37, r24	; 55
	SREG |= (1<<7);
 13e:	8f b7       	in	r24, 0x3f	; 63
 140:	80 68       	ori	r24, 0x80	; 128
 142:	8f bf       	out	0x3f, r24	; 63

	DDRD &=~(1<<PD4);
 144:	81 b3       	in	r24, 0x11	; 17
 146:	8f 7e       	andi	r24, 0xEF	; 239
 148:	81 bb       	out	0x11, r24	; 17
 14a:	08 95       	ret

0000014c <Icu_SelectEdge>:
}

void 	Icu_SelectEdge(Icu_Edge_t Icu_Edge)
{
	/*Clearing ICES1 Bit*/
	TCCR1B &= (0xBF);
 14c:	9e b5       	in	r25, 0x2e	; 46
 14e:	9f 7b       	andi	r25, 0xBF	; 191
 150:	9e bd       	out	0x2e, r25	; 46
	TCCR1B |= (Icu_Edge<<ICES1);
 152:	2e b5       	in	r18, 0x2e	; 46
 154:	30 e4       	ldi	r19, 0x40	; 64
 156:	83 9f       	mul	r24, r19
 158:	c0 01       	movw	r24, r0
 15a:	11 24       	eor	r1, r1
 15c:	82 2b       	or	r24, r18
 15e:	8e bd       	out	0x2e, r24	; 46
 160:	08 95       	ret

00000162 <Icu_Get_Value>:
}

uint16	Icu_Get_Value(void)
{
	return ICR1;
 162:	86 b5       	in	r24, 0x26	; 38
 164:	97 b5       	in	r25, 0x27	; 39
}
 166:	08 95       	ret

00000168 <Icu_Clear_TimerValue>:

void	Icu_Clear_TimerValue(void)
{
	TCNT1 = 0;
 168:	1d bc       	out	0x2d, r1	; 45
 16a:	1c bc       	out	0x2c, r1	; 44
 16c:	08 95       	ret

0000016e <Icu_Set_Cbk>:
}

void 	Icu_Set_Cbk(void (*Cbk)(void))
{
	PTR = Cbk;
 16e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <__data_end+0x1>
 172:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <__data_end>
 176:	08 95       	ret

00000178 <LCD_Send_Command>:
	_delay_ms(1);

	/*LCD as 8bit mode*/
#elif LCD_BIT_MODE == 4
#ifdef   LCD_DATA_HIGH_NIBBLE
	LCD_CTRL_PORT_RS &=~(1<<RS); // command mode
 178:	95 b3       	in	r25, 0x15	; 21
 17a:	9f 7b       	andi	r25, 0xBF	; 191
 17c:	95 bb       	out	0x15, r25	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17e:	e9 ef       	ldi	r30, 0xF9	; 249
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	31 97       	sbiw	r30, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <LCD_Send_Command+0xa>
 186:	00 c0       	rjmp	.+0      	; 0x188 <LCD_Send_Command+0x10>
 188:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT_E |=(1<<E);
 18a:	95 b3       	in	r25, 0x15	; 21
 18c:	90 68       	ori	r25, 0x80	; 128
 18e:	95 bb       	out	0x15, r25	; 21
 190:	e9 ef       	ldi	r30, 0xF9	; 249
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	31 97       	sbiw	r30, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <LCD_Send_Command+0x1c>
 198:	00 c0       	rjmp	.+0      	; 0x19a <LCD_Send_Command+0x22>
 19a:	00 00       	nop
	_delay_ms(1);
	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x0F);
 19c:	98 b3       	in	r25, 0x18	; 24
 19e:	9f 70       	andi	r25, 0x0F	; 15
 1a0:	98 bb       	out	0x18, r25	; 24
	LCD_DATA_PORT |=(command&0xF0);
 1a2:	98 b3       	in	r25, 0x18	; 24
 1a4:	28 2f       	mov	r18, r24
 1a6:	20 7f       	andi	r18, 0xF0	; 240
 1a8:	92 2b       	or	r25, r18
 1aa:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL_PORT_E &=~(1<<E);
 1ac:	95 b3       	in	r25, 0x15	; 21
 1ae:	9f 77       	andi	r25, 0x7F	; 127
 1b0:	95 bb       	out	0x15, r25	; 21
 1b2:	e9 ef       	ldi	r30, 0xF9	; 249
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCD_Send_Command+0x3e>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <LCD_Send_Command+0x44>
 1bc:	00 00       	nop
	_delay_ms(1);

	LCD_CTRL_PORT_RS &=~(1<<RS); // command mode
 1be:	95 b3       	in	r25, 0x15	; 21
 1c0:	9f 7b       	andi	r25, 0xBF	; 191
 1c2:	95 bb       	out	0x15, r25	; 21
	LCD_CTRL_PORT_E |=(1<<E);
 1c4:	95 b3       	in	r25, 0x15	; 21
 1c6:	90 68       	ori	r25, 0x80	; 128
 1c8:	95 bb       	out	0x15, r25	; 21
 1ca:	e9 ef       	ldi	r30, 0xF9	; 249
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <LCD_Send_Command+0x56>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <LCD_Send_Command+0x5c>
 1d4:	00 00       	nop
	_delay_ms(1);
	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x0F);
 1d6:	98 b3       	in	r25, 0x18	; 24
 1d8:	9f 70       	andi	r25, 0x0F	; 15
 1da:	98 bb       	out	0x18, r25	; 24
	LCD_DATA_PORT |=( (command<<4)&0xF0);
 1dc:	28 b3       	in	r18, 0x18	; 24
 1de:	f0 e1       	ldi	r31, 0x10	; 16
 1e0:	8f 9f       	mul	r24, r31
 1e2:	c0 01       	movw	r24, r0
 1e4:	11 24       	eor	r1, r1
 1e6:	82 2b       	or	r24, r18
 1e8:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL_PORT_E &=~(1<<E);
 1ea:	85 b3       	in	r24, 0x15	; 21
 1ec:	8f 77       	andi	r24, 0x7F	; 127
 1ee:	85 bb       	out	0x15, r24	; 21
 1f0:	89 ef       	ldi	r24, 0xF9	; 249
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <LCD_Send_Command+0x7c>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <LCD_Send_Command+0x82>
 1fa:	00 00       	nop
 1fc:	08 95       	ret

000001fe <LCD_Init>:
#include "LCD.h"

/*LCD initialization & clearing*/
void LCD_Init(void)
{
	LCD_CTRL_PORT_DIR_RS |=(1<<RS);
 1fe:	84 b3       	in	r24, 0x14	; 20
 200:	80 64       	ori	r24, 0x40	; 64
 202:	84 bb       	out	0x14, r24	; 20
	LCD_CTRL_PORT_DIR_E  |=(1<<E);
 204:	84 b3       	in	r24, 0x14	; 20
 206:	80 68       	ori	r24, 0x80	; 128
 208:	84 bb       	out	0x14, r24	; 20

#if LCD_BIT_MODE  == 4

#ifdef LCD_DATA_HIGH_NIBBLE
	LCD_DATA_PORT_DIR |=0xF0;
 20a:	87 b3       	in	r24, 0x17	; 23
 20c:	80 6f       	ori	r24, 0xF0	; 240
 20e:	87 bb       	out	0x17, r24	; 23
	LCD_Send_Command(ReturnHome);
 210:	82 e0       	ldi	r24, 0x02	; 2
 212:	b2 df       	rcall	.-156    	; 0x178 <LCD_Send_Command>
	LCD_Send_Command(_4BIT_2LINE);
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	b0 df       	rcall	.-160    	; 0x178 <LCD_Send_Command>
 218:	89 ef       	ldi	r24, 0xF9	; 249
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	01 97       	sbiw	r24, 0x01	; 1
 21e:	f1 f7       	brne	.-4      	; 0x21c <LCD_Init+0x1e>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x24>
	LCD_DATA_PORT_DIR=0xff;
	LCD_Send_Command(ReturnHome);
	LCD_Send_Command(_8BIT_2LINE);
#endif
	_delay_ms(1);
	LCD_Send_Command(CLEAR_DISPLAY);
 222:	00 00       	nop
 224:	81 e0       	ldi	r24, 0x01	; 1
	LCD_Send_Command(DISPLAY_ON_CURSOR_OFF);
 226:	a8 df       	rcall	.-176    	; 0x178 <LCD_Send_Command>
 228:	8c e0       	ldi	r24, 0x0C	; 12
 22a:	a6 cf       	rjmp	.-180    	; 0x178 <LCD_Send_Command>
 22c:	08 95       	ret

0000022e <LCD_Clear_Display>:

}
/*LCD Clearing the display*/
void LCD_Clear_Display(void)
{
	LCD_Send_Command(CLEAR_DISPLAY);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	a3 cf       	rjmp	.-186    	; 0x178 <LCD_Send_Command>
 232:	08 95       	ret

00000234 <LCD_Send_character>:

	/*LCD as 8bit mode*/
#elif LCD_BIT_MODE == 4
#ifdef LCD_DATA_HIGH_NIBBLE

	LCD_CTRL_PORT_RS |=(1<<RS); // Data mode
 234:	95 b3       	in	r25, 0x15	; 21
 236:	90 64       	ori	r25, 0x40	; 64
 238:	95 bb       	out	0x15, r25	; 21
 23a:	e9 ef       	ldi	r30, 0xF9	; 249
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	31 97       	sbiw	r30, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <LCD_Send_character+0xa>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_Send_character+0x10>
 244:	00 00       	nop
	_delay_ms(1);
	LCD_CTRL_PORT_E |=(1<<E);
 246:	95 b3       	in	r25, 0x15	; 21
 248:	90 68       	ori	r25, 0x80	; 128
 24a:	95 bb       	out	0x15, r25	; 21
 24c:	e9 ef       	ldi	r30, 0xF9	; 249
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	31 97       	sbiw	r30, 0x01	; 1
 252:	f1 f7       	brne	.-4      	; 0x250 <LCD_Send_character+0x1c>
 254:	00 c0       	rjmp	.+0      	; 0x256 <LCD_Send_character+0x22>
 256:	00 00       	nop
	_delay_ms(1);

	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x0F);
 258:	98 b3       	in	r25, 0x18	; 24
 25a:	9f 70       	andi	r25, 0x0F	; 15
 25c:	98 bb       	out	0x18, r25	; 24
	LCD_DATA_PORT |=((character)&0xF0);
 25e:	98 b3       	in	r25, 0x18	; 24
 260:	28 2f       	mov	r18, r24
 262:	20 7f       	andi	r18, 0xF0	; 240
 264:	92 2b       	or	r25, r18
 266:	98 bb       	out	0x18, r25	; 24
	LCD_CTRL_PORT_E &=~(1<<E);
 268:	95 b3       	in	r25, 0x15	; 21
 26a:	9f 77       	andi	r25, 0x7F	; 127
 26c:	95 bb       	out	0x15, r25	; 21
 26e:	e9 ef       	ldi	r30, 0xF9	; 249
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	31 97       	sbiw	r30, 0x01	; 1
 274:	f1 f7       	brne	.-4      	; 0x272 <LCD_Send_character+0x3e>
 276:	00 c0       	rjmp	.+0      	; 0x278 <LCD_Send_character+0x44>
 278:	00 00       	nop
	_delay_ms(1);

	LCD_CTRL_PORT_RS |=(1<<RS); // Data mode
 27a:	95 b3       	in	r25, 0x15	; 21
 27c:	90 64       	ori	r25, 0x40	; 64
 27e:	95 bb       	out	0x15, r25	; 21
	LCD_CTRL_PORT_E |=(1<<E);
 280:	95 b3       	in	r25, 0x15	; 21
 282:	90 68       	ori	r25, 0x80	; 128
 284:	95 bb       	out	0x15, r25	; 21
 286:	e9 ef       	ldi	r30, 0xF9	; 249
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <LCD_Send_character+0x56>
 28e:	00 c0       	rjmp	.+0      	; 0x290 <LCD_Send_character+0x5c>
 290:	00 00       	nop
	_delay_ms(1);
	/* Clearing Data Port  For new Data*/
	LCD_DATA_PORT &= (0x0F);
 292:	98 b3       	in	r25, 0x18	; 24
 294:	9f 70       	andi	r25, 0x0F	; 15
 296:	98 bb       	out	0x18, r25	; 24
	LCD_DATA_PORT |=( (character<<4)&0xF0);
 298:	28 b3       	in	r18, 0x18	; 24
 29a:	f0 e1       	ldi	r31, 0x10	; 16
 29c:	8f 9f       	mul	r24, r31
 29e:	c0 01       	movw	r24, r0
 2a0:	11 24       	eor	r1, r1
 2a2:	82 2b       	or	r24, r18
 2a4:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL_PORT_E &=~(1<<E);
 2a6:	85 b3       	in	r24, 0x15	; 21
 2a8:	8f 77       	andi	r24, 0x7F	; 127
 2aa:	85 bb       	out	0x15, r24	; 21
 2ac:	89 ef       	ldi	r24, 0xF9	; 249
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCD_Send_character+0x7c>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCD_Send_character+0x82>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <LCD_Send_String>:
#endif
}

/*LCD displaying a String*/
void LCD_Send_String(char *string)
{
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	8c 01       	movw	r16, r24
	int i=0;
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
	while(string[i]!='\0')
 2c8:	02 c0       	rjmp	.+4      	; 0x2ce <LCD_Send_String+0x14>
	{
		LCD_Send_character(string[i]);
 2ca:	b4 df       	rcall	.-152    	; 0x234 <LCD_Send_character>
		i++;
 2cc:	21 96       	adiw	r28, 0x01	; 1

/*LCD displaying a String*/
void LCD_Send_String(char *string)
{
	int i=0;
	while(string[i]!='\0')
 2ce:	f8 01       	movw	r30, r16
 2d0:	ec 0f       	add	r30, r28
 2d2:	fd 1f       	adc	r31, r29
 2d4:	80 81       	ld	r24, Z
 2d6:	81 11       	cpse	r24, r1
 2d8:	f8 cf       	rjmp	.-16     	; 0x2ca <LCD_Send_String+0x10>
	{
		LCD_Send_character(string[i]);
		i++;
	}
}
 2da:	df 91       	pop	r29
 2dc:	cf 91       	pop	r28
 2de:	1f 91       	pop	r17
 2e0:	0f 91       	pop	r16
 2e2:	08 95       	ret

000002e4 <LCD_GoTO_Row_Colunmn>:
/*set the cursor at certain location*/
void LCD_GoTO_Row_Colunmn(char Row,char Column)
{
	unsigned char address=0;

	switch (Row)
 2e4:	81 30       	cpi	r24, 0x01	; 1
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <LCD_GoTO_Row_Colunmn+0x12>
 2e8:	58 f0       	brcs	.+22     	; 0x300 <LCD_GoTO_Row_Colunmn+0x1c>
 2ea:	82 30       	cpi	r24, 0x02	; 2
 2ec:	31 f0       	breq	.+12     	; 0x2fa <LCD_GoTO_Row_Colunmn+0x16>
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	31 f0       	breq	.+12     	; 0x2fe <LCD_GoTO_Row_Colunmn+0x1a>
}

/*set the cursor at certain location*/
void LCD_GoTO_Row_Colunmn(char Row,char Column)
{
	unsigned char address=0;
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <LCD_GoTO_Row_Colunmn+0x1c>

	switch (Row)
	{
	case 0:address =(Column);break;
	case 1:address =(Column+0x40);break;
 2f6:	60 5c       	subi	r22, 0xC0	; 192
 2f8:	03 c0       	rjmp	.+6      	; 0x300 <LCD_GoTO_Row_Colunmn+0x1c>
	case 2:address =(Column+0x10);break;
 2fa:	60 5f       	subi	r22, 0xF0	; 240
 2fc:	01 c0       	rjmp	.+2      	; 0x300 <LCD_GoTO_Row_Colunmn+0x1c>
	case 3:address =(Column+0x50);break;
 2fe:	60 5b       	subi	r22, 0xB0	; 176
	}

	/* we need to apply the corresponding command 0b10000000+Address */
	LCD_Send_Command(address|(SET_CURSOR_LOCATION));
 300:	86 2f       	mov	r24, r22
 302:	80 68       	ori	r24, 0x80	; 128
 304:	39 cf       	rjmp	.-398    	; 0x178 <LCD_Send_Command>
 306:	08 95       	ret

00000308 <LCD_Send_String_Row_Column>:

}

/*lcd Send String at certain location*/
void LCD_Send_String_Row_Column(char Row,char Column,char *String)
{
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ea 01       	movw	r28, r20
	LCD_GoTO_Row_Colunmn(Row,Column);
 30e:	ea df       	rcall	.-44     	; 0x2e4 <LCD_GoTO_Row_Colunmn>
	LCD_Send_String(String);
 310:	ce 01       	movw	r24, r28
 312:	d3 df       	rcall	.-90     	; 0x2ba <LCD_Send_String>
}
 314:	df 91       	pop	r29
 316:	cf 91       	pop	r28
 318:	08 95       	ret

0000031a <LCD_IntToString>:
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 31a:	4a e0       	ldi	r20, 0x0A	; 10
 31c:	80 c2       	rjmp	.+1280   	; 0x81e <__itoa_ncheck>
 31e:	08 95       	ret

00000320 <PulseMeasure>:


void PulseMeasure(void)
{

	PulseState++;
 320:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <PulseState>
 324:	8f 5f       	subi	r24, 0xFF	; 255
 326:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <PulseState>

	switch (PulseState)
 32a:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <PulseState>
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	69 f0       	breq	.+26     	; 0x34c <PulseMeasure+0x2c>
 332:	18 f4       	brcc	.+6      	; 0x33a <PulseMeasure+0x1a>
 334:	81 30       	cpi	r24, 0x01	; 1
 336:	31 f0       	breq	.+12     	; 0x344 <PulseMeasure+0x24>
 338:	08 95       	ret
 33a:	83 30       	cpi	r24, 0x03	; 3
 33c:	81 f0       	breq	.+32     	; 0x35e <PulseMeasure+0x3e>
 33e:	84 30       	cpi	r24, 0x04	; 4
 340:	b9 f0       	breq	.+46     	; 0x370 <PulseMeasure+0x50>
 342:	08 95       	ret
	{
	case 1:
		Icu_SelectEdge(FALLING);
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	02 df       	rcall	.-508    	; 0x14c <Icu_SelectEdge>
		Icu_Clear_TimerValue();
 348:	0f cf       	rjmp	.-482    	; 0x168 <Icu_Clear_TimerValue>

		break;
 34a:	08 95       	ret

	case 2:
		T_ON = Icu_Get_Value();
 34c:	0a df       	rcall	.-492    	; 0x162 <Icu_Get_Value>
 34e:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <T_ON+0x1>
 352:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <T_ON>
		Icu_SelectEdge(RISING);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	f9 de       	rcall	.-526    	; 0x14c <Icu_SelectEdge>
		Icu_Clear_TimerValue();
 35a:	06 cf       	rjmp	.-500    	; 0x168 <Icu_Clear_TimerValue>
 35c:	08 95       	ret
	
		break;
 35e:	01 df       	rcall	.-510    	; 0x162 <Icu_Get_Value>

	case 3:
		T_OFF = Icu_Get_Value();
 360:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <T_OFF+0x1>
 364:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <T_OFF>
		Icu_SelectEdge(FALLING);
 368:	80 e0       	ldi	r24, 0x00	; 0
 36a:	f0 de       	rcall	.-544    	; 0x14c <Icu_SelectEdge>
		Icu_Clear_TimerValue();
 36c:	fd ce       	rjmp	.-518    	; 0x168 <Icu_Clear_TimerValue>
 36e:	08 95       	ret

		break;
 370:	81 e0       	ldi	r24, 0x01	; 1
		
	case 4:
		Icu_SelectEdge(RISING);
 372:	ec de       	rcall	.-552    	; 0x14c <Icu_SelectEdge>
 374:	f9 de       	rcall	.-526    	; 0x168 <Icu_Clear_TimerValue>
 376:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <PulseState>
		Icu_Clear_TimerValue();
 37a:	08 95       	ret

0000037c <main>:
		PulseState = 0;
 37c:	cf 93       	push	r28
 37e:	df 93       	push	r29
 380:	cd b7       	in	r28, 0x3d	; 61
		break;
	}
}

int main(void)
{
 382:	de b7       	in	r29, 0x3e	; 62
 384:	2a 97       	sbiw	r28, 0x0a	; 10
 386:	0f b6       	in	r0, 0x3f	; 63
 388:	f8 94       	cli
 38a:	de bf       	out	0x3e, r29	; 62
 38c:	0f be       	out	0x3f, r0	; 63
 38e:	cd bf       	out	0x3d, r28	; 61
	char arr[10];

	LCD_Init();
 390:	36 df       	rcall	.-404    	; 0x1fe <LCD_Init>
	LCD_Clear_Display();
 392:	4d df       	rcall	.-358    	; 0x22e <LCD_Clear_Display>

	Icu_init(F_CPU_8);
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	c5 de       	rcall	.-630    	; 0x122 <Icu_init>
	Icu_SelectEdge(RISING);
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	d8 de       	rcall	.-592    	; 0x14c <Icu_SelectEdge>
	Icu_Clear_TimerValue();
 39c:	e5 de       	rcall	.-566    	; 0x168 <Icu_Clear_TimerValue>
 39e:	80 e9       	ldi	r24, 0x90	; 144
	Icu_Set_Cbk(PulseMeasure);
 3a0:	91 e0       	ldi	r25, 0x01	; 1
 3a2:	e5 de       	rcall	.-566    	; 0x16e <Icu_Set_Cbk>
 3a4:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <T_ON>

	

	while(1)
	{
		DutyCycle = ( ( (float)(T_ON)/( (float)T_ON + (float)T_OFF) ) * 100.00);
 3a8:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <T_ON+0x1>
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	45 d1       	rcall	.+650    	; 0x63c <__floatunsisf>
 3b2:	6b 01       	movw	r12, r22
 3b4:	7c 01       	movw	r14, r24
 3b6:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <T_ON>
 3ba:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <T_ON+0x1>
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	3c d1       	rcall	.+632    	; 0x63c <__floatunsisf>
 3c4:	4b 01       	movw	r8, r22
 3c6:	5c 01       	movw	r10, r24
 3c8:	60 91 15 01 	lds	r22, 0x0115	; 0x800115 <T_OFF>
 3cc:	70 91 16 01 	lds	r23, 0x0116	; 0x800116 <T_OFF+0x1>
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	33 d1       	rcall	.+614    	; 0x63c <__floatunsisf>
 3d6:	9b 01       	movw	r18, r22
 3d8:	ac 01       	movw	r20, r24
 3da:	c5 01       	movw	r24, r10
 3dc:	b4 01       	movw	r22, r8
 3de:	31 d0       	rcall	.+98     	; 0x442 <__addsf3>
 3e0:	9b 01       	movw	r18, r22
 3e2:	ac 01       	movw	r20, r24
 3e4:	c7 01       	movw	r24, r14
 3e6:	b6 01       	movw	r22, r12
 3e8:	90 d0       	rcall	.+288    	; 0x50a <__divsf3>
 3ea:	20 e0       	ldi	r18, 0x00	; 0
 3ec:	30 e0       	ldi	r19, 0x00	; 0
 3ee:	48 ec       	ldi	r20, 0xC8	; 200
 3f0:	52 e4       	ldi	r21, 0x42	; 66
 3f2:	b2 d1       	rcall	.+868    	; 0x758 <__mulsf3>
 3f4:	60 93 19 01 	sts	0x0119, r22	; 0x800119 <DutyCycle>
 3f8:	70 93 1a 01 	sts	0x011A, r23	; 0x80011a <DutyCycle+0x1>
 3fc:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <DutyCycle+0x2>
 400:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <DutyCycle+0x3>
 404:	40 e0       	ldi	r20, 0x00	; 0


		LCD_Send_String_Row_Column(0,0,"DutyCycle is :");
 406:	51 e0       	ldi	r21, 0x01	; 1
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	7d df       	rcall	.-262    	; 0x308 <LCD_Send_String_Row_Column>
 40e:	60 91 19 01 	lds	r22, 0x0119	; 0x800119 <DutyCycle>
		LCD_IntToString((int)DutyCycle, arr);
 412:	70 91 1a 01 	lds	r23, 0x011A	; 0x80011a <DutyCycle+0x1>
 416:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <DutyCycle+0x2>
 41a:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <DutyCycle+0x3>
 41e:	dd d0       	rcall	.+442    	; 0x5da <__fixsfsi>
 420:	dc 01       	movw	r26, r24
 422:	cb 01       	movw	r24, r22
 424:	be 01       	movw	r22, r28
 426:	6f 5f       	subi	r22, 0xFF	; 255
 428:	7f 4f       	sbci	r23, 0xFF	; 255
		LCD_GoTO_Row_Colunmn(1,0);
 42a:	77 df       	rcall	.-274    	; 0x31a <LCD_IntToString>
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	59 df       	rcall	.-334    	; 0x2e4 <LCD_GoTO_Row_Colunmn>
		LCD_Send_String(arr);
 432:	ce 01       	movw	r24, r28
 434:	01 96       	adiw	r24, 0x01	; 1
 436:	41 df       	rcall	.-382    	; 0x2ba <LCD_Send_String>
 438:	8f e0       	ldi	r24, 0x0F	; 15
		LCD_Send_String(" %");
 43a:	91 e0       	ldi	r25, 0x01	; 1
 43c:	3e df       	rcall	.-388    	; 0x2ba <LCD_Send_String>
 43e:	b2 cf       	rjmp	.-156    	; 0x3a4 <main+0x28>

00000440 <__subsf3>:
 440:	50 58       	subi	r21, 0x80	; 128

00000442 <__addsf3>:
 442:	bb 27       	eor	r27, r27
 444:	aa 27       	eor	r26, r26
 446:	0e d0       	rcall	.+28     	; 0x464 <__addsf3x>
 448:	4d c1       	rjmp	.+666    	; 0x6e4 <__fp_round>
 44a:	3e d1       	rcall	.+636    	; 0x6c8 <__fp_pscA>
 44c:	30 f0       	brcs	.+12     	; 0x45a <__addsf3+0x18>
 44e:	43 d1       	rcall	.+646    	; 0x6d6 <__fp_pscB>
 450:	20 f0       	brcs	.+8      	; 0x45a <__addsf3+0x18>
 452:	31 f4       	brne	.+12     	; 0x460 <__addsf3+0x1e>
 454:	9f 3f       	cpi	r25, 0xFF	; 255
 456:	11 f4       	brne	.+4      	; 0x45c <__addsf3+0x1a>
 458:	1e f4       	brtc	.+6      	; 0x460 <__addsf3+0x1e>
 45a:	33 c1       	rjmp	.+614    	; 0x6c2 <__fp_nan>
 45c:	0e f4       	brtc	.+2      	; 0x460 <__addsf3+0x1e>
 45e:	e0 95       	com	r30
 460:	e7 fb       	bst	r30, 7
 462:	29 c1       	rjmp	.+594    	; 0x6b6 <__fp_inf>

00000464 <__addsf3x>:
 464:	e9 2f       	mov	r30, r25
 466:	4f d1       	rcall	.+670    	; 0x706 <__fp_split3>
 468:	80 f3       	brcs	.-32     	; 0x44a <__addsf3+0x8>
 46a:	ba 17       	cp	r27, r26
 46c:	62 07       	cpc	r22, r18
 46e:	73 07       	cpc	r23, r19
 470:	84 07       	cpc	r24, r20
 472:	95 07       	cpc	r25, r21
 474:	18 f0       	brcs	.+6      	; 0x47c <__addsf3x+0x18>
 476:	71 f4       	brne	.+28     	; 0x494 <__addsf3x+0x30>
 478:	9e f5       	brtc	.+102    	; 0x4e0 <__addsf3x+0x7c>
 47a:	67 c1       	rjmp	.+718    	; 0x74a <__fp_zero>
 47c:	0e f4       	brtc	.+2      	; 0x480 <__addsf3x+0x1c>
 47e:	e0 95       	com	r30
 480:	0b 2e       	mov	r0, r27
 482:	ba 2f       	mov	r27, r26
 484:	a0 2d       	mov	r26, r0
 486:	0b 01       	movw	r0, r22
 488:	b9 01       	movw	r22, r18
 48a:	90 01       	movw	r18, r0
 48c:	0c 01       	movw	r0, r24
 48e:	ca 01       	movw	r24, r20
 490:	a0 01       	movw	r20, r0
 492:	11 24       	eor	r1, r1
 494:	ff 27       	eor	r31, r31
 496:	59 1b       	sub	r21, r25
 498:	99 f0       	breq	.+38     	; 0x4c0 <__addsf3x+0x5c>
 49a:	59 3f       	cpi	r21, 0xF9	; 249
 49c:	50 f4       	brcc	.+20     	; 0x4b2 <__addsf3x+0x4e>
 49e:	50 3e       	cpi	r21, 0xE0	; 224
 4a0:	68 f1       	brcs	.+90     	; 0x4fc <__addsf3x+0x98>
 4a2:	1a 16       	cp	r1, r26
 4a4:	f0 40       	sbci	r31, 0x00	; 0
 4a6:	a2 2f       	mov	r26, r18
 4a8:	23 2f       	mov	r18, r19
 4aa:	34 2f       	mov	r19, r20
 4ac:	44 27       	eor	r20, r20
 4ae:	58 5f       	subi	r21, 0xF8	; 248
 4b0:	f3 cf       	rjmp	.-26     	; 0x498 <__addsf3x+0x34>
 4b2:	46 95       	lsr	r20
 4b4:	37 95       	ror	r19
 4b6:	27 95       	ror	r18
 4b8:	a7 95       	ror	r26
 4ba:	f0 40       	sbci	r31, 0x00	; 0
 4bc:	53 95       	inc	r21
 4be:	c9 f7       	brne	.-14     	; 0x4b2 <__addsf3x+0x4e>
 4c0:	7e f4       	brtc	.+30     	; 0x4e0 <__addsf3x+0x7c>
 4c2:	1f 16       	cp	r1, r31
 4c4:	ba 0b       	sbc	r27, r26
 4c6:	62 0b       	sbc	r22, r18
 4c8:	73 0b       	sbc	r23, r19
 4ca:	84 0b       	sbc	r24, r20
 4cc:	ba f0       	brmi	.+46     	; 0x4fc <__addsf3x+0x98>
 4ce:	91 50       	subi	r25, 0x01	; 1
 4d0:	a1 f0       	breq	.+40     	; 0x4fa <__addsf3x+0x96>
 4d2:	ff 0f       	add	r31, r31
 4d4:	bb 1f       	adc	r27, r27
 4d6:	66 1f       	adc	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	88 1f       	adc	r24, r24
 4dc:	c2 f7       	brpl	.-16     	; 0x4ce <__addsf3x+0x6a>
 4de:	0e c0       	rjmp	.+28     	; 0x4fc <__addsf3x+0x98>
 4e0:	ba 0f       	add	r27, r26
 4e2:	62 1f       	adc	r22, r18
 4e4:	73 1f       	adc	r23, r19
 4e6:	84 1f       	adc	r24, r20
 4e8:	48 f4       	brcc	.+18     	; 0x4fc <__addsf3x+0x98>
 4ea:	87 95       	ror	r24
 4ec:	77 95       	ror	r23
 4ee:	67 95       	ror	r22
 4f0:	b7 95       	ror	r27
 4f2:	f7 95       	ror	r31
 4f4:	9e 3f       	cpi	r25, 0xFE	; 254
 4f6:	08 f0       	brcs	.+2      	; 0x4fa <__addsf3x+0x96>
 4f8:	b3 cf       	rjmp	.-154    	; 0x460 <__addsf3+0x1e>
 4fa:	93 95       	inc	r25
 4fc:	88 0f       	add	r24, r24
 4fe:	08 f0       	brcs	.+2      	; 0x502 <__addsf3x+0x9e>
 500:	99 27       	eor	r25, r25
 502:	ee 0f       	add	r30, r30
 504:	97 95       	ror	r25
 506:	87 95       	ror	r24
 508:	08 95       	ret

0000050a <__divsf3>:
 50a:	0c d0       	rcall	.+24     	; 0x524 <__divsf3x>
 50c:	eb c0       	rjmp	.+470    	; 0x6e4 <__fp_round>
 50e:	e3 d0       	rcall	.+454    	; 0x6d6 <__fp_pscB>
 510:	40 f0       	brcs	.+16     	; 0x522 <__divsf3+0x18>
 512:	da d0       	rcall	.+436    	; 0x6c8 <__fp_pscA>
 514:	30 f0       	brcs	.+12     	; 0x522 <__divsf3+0x18>
 516:	21 f4       	brne	.+8      	; 0x520 <__divsf3+0x16>
 518:	5f 3f       	cpi	r21, 0xFF	; 255
 51a:	19 f0       	breq	.+6      	; 0x522 <__divsf3+0x18>
 51c:	cc c0       	rjmp	.+408    	; 0x6b6 <__fp_inf>
 51e:	51 11       	cpse	r21, r1
 520:	15 c1       	rjmp	.+554    	; 0x74c <__fp_szero>
 522:	cf c0       	rjmp	.+414    	; 0x6c2 <__fp_nan>

00000524 <__divsf3x>:
 524:	f0 d0       	rcall	.+480    	; 0x706 <__fp_split3>
 526:	98 f3       	brcs	.-26     	; 0x50e <__divsf3+0x4>

00000528 <__divsf3_pse>:
 528:	99 23       	and	r25, r25
 52a:	c9 f3       	breq	.-14     	; 0x51e <__divsf3+0x14>
 52c:	55 23       	and	r21, r21
 52e:	b1 f3       	breq	.-20     	; 0x51c <__divsf3+0x12>
 530:	95 1b       	sub	r25, r21
 532:	55 0b       	sbc	r21, r21
 534:	bb 27       	eor	r27, r27
 536:	aa 27       	eor	r26, r26
 538:	62 17       	cp	r22, r18
 53a:	73 07       	cpc	r23, r19
 53c:	84 07       	cpc	r24, r20
 53e:	38 f0       	brcs	.+14     	; 0x54e <__divsf3_pse+0x26>
 540:	9f 5f       	subi	r25, 0xFF	; 255
 542:	5f 4f       	sbci	r21, 0xFF	; 255
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	44 1f       	adc	r20, r20
 54a:	aa 1f       	adc	r26, r26
 54c:	a9 f3       	breq	.-22     	; 0x538 <__divsf3_pse+0x10>
 54e:	33 d0       	rcall	.+102    	; 0x5b6 <__divsf3_pse+0x8e>
 550:	0e 2e       	mov	r0, r30
 552:	3a f0       	brmi	.+14     	; 0x562 <__divsf3_pse+0x3a>
 554:	e0 e8       	ldi	r30, 0x80	; 128
 556:	30 d0       	rcall	.+96     	; 0x5b8 <__divsf3_pse+0x90>
 558:	91 50       	subi	r25, 0x01	; 1
 55a:	50 40       	sbci	r21, 0x00	; 0
 55c:	e6 95       	lsr	r30
 55e:	00 1c       	adc	r0, r0
 560:	ca f7       	brpl	.-14     	; 0x554 <__divsf3_pse+0x2c>
 562:	29 d0       	rcall	.+82     	; 0x5b6 <__divsf3_pse+0x8e>
 564:	fe 2f       	mov	r31, r30
 566:	27 d0       	rcall	.+78     	; 0x5b6 <__divsf3_pse+0x8e>
 568:	66 0f       	add	r22, r22
 56a:	77 1f       	adc	r23, r23
 56c:	88 1f       	adc	r24, r24
 56e:	bb 1f       	adc	r27, r27
 570:	26 17       	cp	r18, r22
 572:	37 07       	cpc	r19, r23
 574:	48 07       	cpc	r20, r24
 576:	ab 07       	cpc	r26, r27
 578:	b0 e8       	ldi	r27, 0x80	; 128
 57a:	09 f0       	breq	.+2      	; 0x57e <__divsf3_pse+0x56>
 57c:	bb 0b       	sbc	r27, r27
 57e:	80 2d       	mov	r24, r0
 580:	bf 01       	movw	r22, r30
 582:	ff 27       	eor	r31, r31
 584:	93 58       	subi	r25, 0x83	; 131
 586:	5f 4f       	sbci	r21, 0xFF	; 255
 588:	2a f0       	brmi	.+10     	; 0x594 <__divsf3_pse+0x6c>
 58a:	9e 3f       	cpi	r25, 0xFE	; 254
 58c:	51 05       	cpc	r21, r1
 58e:	68 f0       	brcs	.+26     	; 0x5aa <__divsf3_pse+0x82>
 590:	92 c0       	rjmp	.+292    	; 0x6b6 <__fp_inf>
 592:	dc c0       	rjmp	.+440    	; 0x74c <__fp_szero>
 594:	5f 3f       	cpi	r21, 0xFF	; 255
 596:	ec f3       	brlt	.-6      	; 0x592 <__divsf3_pse+0x6a>
 598:	98 3e       	cpi	r25, 0xE8	; 232
 59a:	dc f3       	brlt	.-10     	; 0x592 <__divsf3_pse+0x6a>
 59c:	86 95       	lsr	r24
 59e:	77 95       	ror	r23
 5a0:	67 95       	ror	r22
 5a2:	b7 95       	ror	r27
 5a4:	f7 95       	ror	r31
 5a6:	9f 5f       	subi	r25, 0xFF	; 255
 5a8:	c9 f7       	brne	.-14     	; 0x59c <__divsf3_pse+0x74>
 5aa:	88 0f       	add	r24, r24
 5ac:	91 1d       	adc	r25, r1
 5ae:	96 95       	lsr	r25
 5b0:	87 95       	ror	r24
 5b2:	97 f9       	bld	r25, 7
 5b4:	08 95       	ret
 5b6:	e1 e0       	ldi	r30, 0x01	; 1
 5b8:	66 0f       	add	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	88 1f       	adc	r24, r24
 5be:	bb 1f       	adc	r27, r27
 5c0:	62 17       	cp	r22, r18
 5c2:	73 07       	cpc	r23, r19
 5c4:	84 07       	cpc	r24, r20
 5c6:	ba 07       	cpc	r27, r26
 5c8:	20 f0       	brcs	.+8      	; 0x5d2 <__divsf3_pse+0xaa>
 5ca:	62 1b       	sub	r22, r18
 5cc:	73 0b       	sbc	r23, r19
 5ce:	84 0b       	sbc	r24, r20
 5d0:	ba 0b       	sbc	r27, r26
 5d2:	ee 1f       	adc	r30, r30
 5d4:	88 f7       	brcc	.-30     	; 0x5b8 <__divsf3_pse+0x90>
 5d6:	e0 95       	com	r30
 5d8:	08 95       	ret

000005da <__fixsfsi>:
 5da:	04 d0       	rcall	.+8      	; 0x5e4 <__fixunssfsi>
 5dc:	68 94       	set
 5de:	b1 11       	cpse	r27, r1
 5e0:	b5 c0       	rjmp	.+362    	; 0x74c <__fp_szero>
 5e2:	08 95       	ret

000005e4 <__fixunssfsi>:
 5e4:	98 d0       	rcall	.+304    	; 0x716 <__fp_splitA>
 5e6:	88 f0       	brcs	.+34     	; 0x60a <__fixunssfsi+0x26>
 5e8:	9f 57       	subi	r25, 0x7F	; 127
 5ea:	90 f0       	brcs	.+36     	; 0x610 <__fixunssfsi+0x2c>
 5ec:	b9 2f       	mov	r27, r25
 5ee:	99 27       	eor	r25, r25
 5f0:	b7 51       	subi	r27, 0x17	; 23
 5f2:	a0 f0       	brcs	.+40     	; 0x61c <__fixunssfsi+0x38>
 5f4:	d1 f0       	breq	.+52     	; 0x62a <__fixunssfsi+0x46>
 5f6:	66 0f       	add	r22, r22
 5f8:	77 1f       	adc	r23, r23
 5fa:	88 1f       	adc	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	1a f0       	brmi	.+6      	; 0x606 <__fixunssfsi+0x22>
 600:	ba 95       	dec	r27
 602:	c9 f7       	brne	.-14     	; 0x5f6 <__fixunssfsi+0x12>
 604:	12 c0       	rjmp	.+36     	; 0x62a <__fixunssfsi+0x46>
 606:	b1 30       	cpi	r27, 0x01	; 1
 608:	81 f0       	breq	.+32     	; 0x62a <__fixunssfsi+0x46>
 60a:	9f d0       	rcall	.+318    	; 0x74a <__fp_zero>
 60c:	b1 e0       	ldi	r27, 0x01	; 1
 60e:	08 95       	ret
 610:	9c c0       	rjmp	.+312    	; 0x74a <__fp_zero>
 612:	67 2f       	mov	r22, r23
 614:	78 2f       	mov	r23, r24
 616:	88 27       	eor	r24, r24
 618:	b8 5f       	subi	r27, 0xF8	; 248
 61a:	39 f0       	breq	.+14     	; 0x62a <__fixunssfsi+0x46>
 61c:	b9 3f       	cpi	r27, 0xF9	; 249
 61e:	cc f3       	brlt	.-14     	; 0x612 <__fixunssfsi+0x2e>
 620:	86 95       	lsr	r24
 622:	77 95       	ror	r23
 624:	67 95       	ror	r22
 626:	b3 95       	inc	r27
 628:	d9 f7       	brne	.-10     	; 0x620 <__fixunssfsi+0x3c>
 62a:	3e f4       	brtc	.+14     	; 0x63a <__fixunssfsi+0x56>
 62c:	90 95       	com	r25
 62e:	80 95       	com	r24
 630:	70 95       	com	r23
 632:	61 95       	neg	r22
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__floatunsisf>:
 63c:	e8 94       	clt
 63e:	09 c0       	rjmp	.+18     	; 0x652 <__floatsisf+0x12>

00000640 <__floatsisf>:
 640:	97 fb       	bst	r25, 7
 642:	3e f4       	brtc	.+14     	; 0x652 <__floatsisf+0x12>
 644:	90 95       	com	r25
 646:	80 95       	com	r24
 648:	70 95       	com	r23
 64a:	61 95       	neg	r22
 64c:	7f 4f       	sbci	r23, 0xFF	; 255
 64e:	8f 4f       	sbci	r24, 0xFF	; 255
 650:	9f 4f       	sbci	r25, 0xFF	; 255
 652:	99 23       	and	r25, r25
 654:	a9 f0       	breq	.+42     	; 0x680 <__floatsisf+0x40>
 656:	f9 2f       	mov	r31, r25
 658:	96 e9       	ldi	r25, 0x96	; 150
 65a:	bb 27       	eor	r27, r27
 65c:	93 95       	inc	r25
 65e:	f6 95       	lsr	r31
 660:	87 95       	ror	r24
 662:	77 95       	ror	r23
 664:	67 95       	ror	r22
 666:	b7 95       	ror	r27
 668:	f1 11       	cpse	r31, r1
 66a:	f8 cf       	rjmp	.-16     	; 0x65c <__floatsisf+0x1c>
 66c:	fa f4       	brpl	.+62     	; 0x6ac <__floatsisf+0x6c>
 66e:	bb 0f       	add	r27, r27
 670:	11 f4       	brne	.+4      	; 0x676 <__floatsisf+0x36>
 672:	60 ff       	sbrs	r22, 0
 674:	1b c0       	rjmp	.+54     	; 0x6ac <__floatsisf+0x6c>
 676:	6f 5f       	subi	r22, 0xFF	; 255
 678:	7f 4f       	sbci	r23, 0xFF	; 255
 67a:	8f 4f       	sbci	r24, 0xFF	; 255
 67c:	9f 4f       	sbci	r25, 0xFF	; 255
 67e:	16 c0       	rjmp	.+44     	; 0x6ac <__floatsisf+0x6c>
 680:	88 23       	and	r24, r24
 682:	11 f0       	breq	.+4      	; 0x688 <__floatsisf+0x48>
 684:	96 e9       	ldi	r25, 0x96	; 150
 686:	11 c0       	rjmp	.+34     	; 0x6aa <__floatsisf+0x6a>
 688:	77 23       	and	r23, r23
 68a:	21 f0       	breq	.+8      	; 0x694 <__floatsisf+0x54>
 68c:	9e e8       	ldi	r25, 0x8E	; 142
 68e:	87 2f       	mov	r24, r23
 690:	76 2f       	mov	r23, r22
 692:	05 c0       	rjmp	.+10     	; 0x69e <__floatsisf+0x5e>
 694:	66 23       	and	r22, r22
 696:	71 f0       	breq	.+28     	; 0x6b4 <__floatsisf+0x74>
 698:	96 e8       	ldi	r25, 0x86	; 134
 69a:	86 2f       	mov	r24, r22
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	60 e0       	ldi	r22, 0x00	; 0
 6a0:	2a f0       	brmi	.+10     	; 0x6ac <__floatsisf+0x6c>
 6a2:	9a 95       	dec	r25
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	da f7       	brpl	.-10     	; 0x6a2 <__floatsisf+0x62>
 6ac:	88 0f       	add	r24, r24
 6ae:	96 95       	lsr	r25
 6b0:	87 95       	ror	r24
 6b2:	97 f9       	bld	r25, 7
 6b4:	08 95       	ret

000006b6 <__fp_inf>:
 6b6:	97 f9       	bld	r25, 7
 6b8:	9f 67       	ori	r25, 0x7F	; 127
 6ba:	80 e8       	ldi	r24, 0x80	; 128
 6bc:	70 e0       	ldi	r23, 0x00	; 0
 6be:	60 e0       	ldi	r22, 0x00	; 0
 6c0:	08 95       	ret

000006c2 <__fp_nan>:
 6c2:	9f ef       	ldi	r25, 0xFF	; 255
 6c4:	80 ec       	ldi	r24, 0xC0	; 192
 6c6:	08 95       	ret

000006c8 <__fp_pscA>:
 6c8:	00 24       	eor	r0, r0
 6ca:	0a 94       	dec	r0
 6cc:	16 16       	cp	r1, r22
 6ce:	17 06       	cpc	r1, r23
 6d0:	18 06       	cpc	r1, r24
 6d2:	09 06       	cpc	r0, r25
 6d4:	08 95       	ret

000006d6 <__fp_pscB>:
 6d6:	00 24       	eor	r0, r0
 6d8:	0a 94       	dec	r0
 6da:	12 16       	cp	r1, r18
 6dc:	13 06       	cpc	r1, r19
 6de:	14 06       	cpc	r1, r20
 6e0:	05 06       	cpc	r0, r21
 6e2:	08 95       	ret

000006e4 <__fp_round>:
 6e4:	09 2e       	mov	r0, r25
 6e6:	03 94       	inc	r0
 6e8:	00 0c       	add	r0, r0
 6ea:	11 f4       	brne	.+4      	; 0x6f0 <__fp_round+0xc>
 6ec:	88 23       	and	r24, r24
 6ee:	52 f0       	brmi	.+20     	; 0x704 <__fp_round+0x20>
 6f0:	bb 0f       	add	r27, r27
 6f2:	40 f4       	brcc	.+16     	; 0x704 <__fp_round+0x20>
 6f4:	bf 2b       	or	r27, r31
 6f6:	11 f4       	brne	.+4      	; 0x6fc <__fp_round+0x18>
 6f8:	60 ff       	sbrs	r22, 0
 6fa:	04 c0       	rjmp	.+8      	; 0x704 <__fp_round+0x20>
 6fc:	6f 5f       	subi	r22, 0xFF	; 255
 6fe:	7f 4f       	sbci	r23, 0xFF	; 255
 700:	8f 4f       	sbci	r24, 0xFF	; 255
 702:	9f 4f       	sbci	r25, 0xFF	; 255
 704:	08 95       	ret

00000706 <__fp_split3>:
 706:	57 fd       	sbrc	r21, 7
 708:	90 58       	subi	r25, 0x80	; 128
 70a:	44 0f       	add	r20, r20
 70c:	55 1f       	adc	r21, r21
 70e:	59 f0       	breq	.+22     	; 0x726 <__fp_splitA+0x10>
 710:	5f 3f       	cpi	r21, 0xFF	; 255
 712:	71 f0       	breq	.+28     	; 0x730 <__fp_splitA+0x1a>
 714:	47 95       	ror	r20

00000716 <__fp_splitA>:
 716:	88 0f       	add	r24, r24
 718:	97 fb       	bst	r25, 7
 71a:	99 1f       	adc	r25, r25
 71c:	61 f0       	breq	.+24     	; 0x736 <__fp_splitA+0x20>
 71e:	9f 3f       	cpi	r25, 0xFF	; 255
 720:	79 f0       	breq	.+30     	; 0x740 <__fp_splitA+0x2a>
 722:	87 95       	ror	r24
 724:	08 95       	ret
 726:	12 16       	cp	r1, r18
 728:	13 06       	cpc	r1, r19
 72a:	14 06       	cpc	r1, r20
 72c:	55 1f       	adc	r21, r21
 72e:	f2 cf       	rjmp	.-28     	; 0x714 <__fp_split3+0xe>
 730:	46 95       	lsr	r20
 732:	f1 df       	rcall	.-30     	; 0x716 <__fp_splitA>
 734:	08 c0       	rjmp	.+16     	; 0x746 <__fp_splitA+0x30>
 736:	16 16       	cp	r1, r22
 738:	17 06       	cpc	r1, r23
 73a:	18 06       	cpc	r1, r24
 73c:	99 1f       	adc	r25, r25
 73e:	f1 cf       	rjmp	.-30     	; 0x722 <__fp_splitA+0xc>
 740:	86 95       	lsr	r24
 742:	71 05       	cpc	r23, r1
 744:	61 05       	cpc	r22, r1
 746:	08 94       	sec
 748:	08 95       	ret

0000074a <__fp_zero>:
 74a:	e8 94       	clt

0000074c <__fp_szero>:
 74c:	bb 27       	eor	r27, r27
 74e:	66 27       	eor	r22, r22
 750:	77 27       	eor	r23, r23
 752:	cb 01       	movw	r24, r22
 754:	97 f9       	bld	r25, 7
 756:	08 95       	ret

00000758 <__mulsf3>:
 758:	0b d0       	rcall	.+22     	; 0x770 <__mulsf3x>
 75a:	c4 cf       	rjmp	.-120    	; 0x6e4 <__fp_round>
 75c:	b5 df       	rcall	.-150    	; 0x6c8 <__fp_pscA>
 75e:	28 f0       	brcs	.+10     	; 0x76a <__mulsf3+0x12>
 760:	ba df       	rcall	.-140    	; 0x6d6 <__fp_pscB>
 762:	18 f0       	brcs	.+6      	; 0x76a <__mulsf3+0x12>
 764:	95 23       	and	r25, r21
 766:	09 f0       	breq	.+2      	; 0x76a <__mulsf3+0x12>
 768:	a6 cf       	rjmp	.-180    	; 0x6b6 <__fp_inf>
 76a:	ab cf       	rjmp	.-170    	; 0x6c2 <__fp_nan>
 76c:	11 24       	eor	r1, r1
 76e:	ee cf       	rjmp	.-36     	; 0x74c <__fp_szero>

00000770 <__mulsf3x>:
 770:	ca df       	rcall	.-108    	; 0x706 <__fp_split3>
 772:	a0 f3       	brcs	.-24     	; 0x75c <__mulsf3+0x4>

00000774 <__mulsf3_pse>:
 774:	95 9f       	mul	r25, r21
 776:	d1 f3       	breq	.-12     	; 0x76c <__mulsf3+0x14>
 778:	95 0f       	add	r25, r21
 77a:	50 e0       	ldi	r21, 0x00	; 0
 77c:	55 1f       	adc	r21, r21
 77e:	62 9f       	mul	r22, r18
 780:	f0 01       	movw	r30, r0
 782:	72 9f       	mul	r23, r18
 784:	bb 27       	eor	r27, r27
 786:	f0 0d       	add	r31, r0
 788:	b1 1d       	adc	r27, r1
 78a:	63 9f       	mul	r22, r19
 78c:	aa 27       	eor	r26, r26
 78e:	f0 0d       	add	r31, r0
 790:	b1 1d       	adc	r27, r1
 792:	aa 1f       	adc	r26, r26
 794:	64 9f       	mul	r22, r20
 796:	66 27       	eor	r22, r22
 798:	b0 0d       	add	r27, r0
 79a:	a1 1d       	adc	r26, r1
 79c:	66 1f       	adc	r22, r22
 79e:	82 9f       	mul	r24, r18
 7a0:	22 27       	eor	r18, r18
 7a2:	b0 0d       	add	r27, r0
 7a4:	a1 1d       	adc	r26, r1
 7a6:	62 1f       	adc	r22, r18
 7a8:	73 9f       	mul	r23, r19
 7aa:	b0 0d       	add	r27, r0
 7ac:	a1 1d       	adc	r26, r1
 7ae:	62 1f       	adc	r22, r18
 7b0:	83 9f       	mul	r24, r19
 7b2:	a0 0d       	add	r26, r0
 7b4:	61 1d       	adc	r22, r1
 7b6:	22 1f       	adc	r18, r18
 7b8:	74 9f       	mul	r23, r20
 7ba:	33 27       	eor	r19, r19
 7bc:	a0 0d       	add	r26, r0
 7be:	61 1d       	adc	r22, r1
 7c0:	23 1f       	adc	r18, r19
 7c2:	84 9f       	mul	r24, r20
 7c4:	60 0d       	add	r22, r0
 7c6:	21 1d       	adc	r18, r1
 7c8:	82 2f       	mov	r24, r18
 7ca:	76 2f       	mov	r23, r22
 7cc:	6a 2f       	mov	r22, r26
 7ce:	11 24       	eor	r1, r1
 7d0:	9f 57       	subi	r25, 0x7F	; 127
 7d2:	50 40       	sbci	r21, 0x00	; 0
 7d4:	8a f0       	brmi	.+34     	; 0x7f8 <__mulsf3_pse+0x84>
 7d6:	e1 f0       	breq	.+56     	; 0x810 <__mulsf3_pse+0x9c>
 7d8:	88 23       	and	r24, r24
 7da:	4a f0       	brmi	.+18     	; 0x7ee <__mulsf3_pse+0x7a>
 7dc:	ee 0f       	add	r30, r30
 7de:	ff 1f       	adc	r31, r31
 7e0:	bb 1f       	adc	r27, r27
 7e2:	66 1f       	adc	r22, r22
 7e4:	77 1f       	adc	r23, r23
 7e6:	88 1f       	adc	r24, r24
 7e8:	91 50       	subi	r25, 0x01	; 1
 7ea:	50 40       	sbci	r21, 0x00	; 0
 7ec:	a9 f7       	brne	.-22     	; 0x7d8 <__mulsf3_pse+0x64>
 7ee:	9e 3f       	cpi	r25, 0xFE	; 254
 7f0:	51 05       	cpc	r21, r1
 7f2:	70 f0       	brcs	.+28     	; 0x810 <__mulsf3_pse+0x9c>
 7f4:	60 cf       	rjmp	.-320    	; 0x6b6 <__fp_inf>
 7f6:	aa cf       	rjmp	.-172    	; 0x74c <__fp_szero>
 7f8:	5f 3f       	cpi	r21, 0xFF	; 255
 7fa:	ec f3       	brlt	.-6      	; 0x7f6 <__mulsf3_pse+0x82>
 7fc:	98 3e       	cpi	r25, 0xE8	; 232
 7fe:	dc f3       	brlt	.-10     	; 0x7f6 <__mulsf3_pse+0x82>
 800:	86 95       	lsr	r24
 802:	77 95       	ror	r23
 804:	67 95       	ror	r22
 806:	b7 95       	ror	r27
 808:	f7 95       	ror	r31
 80a:	e7 95       	ror	r30
 80c:	9f 5f       	subi	r25, 0xFF	; 255
 80e:	c1 f7       	brne	.-16     	; 0x800 <__mulsf3_pse+0x8c>
 810:	fe 2b       	or	r31, r30
 812:	88 0f       	add	r24, r24
 814:	91 1d       	adc	r25, r1
 816:	96 95       	lsr	r25
 818:	87 95       	ror	r24
 81a:	97 f9       	bld	r25, 7
 81c:	08 95       	ret

0000081e <__itoa_ncheck>:
 81e:	bb 27       	eor	r27, r27
 820:	4a 30       	cpi	r20, 0x0A	; 10
 822:	31 f4       	brne	.+12     	; 0x830 <__itoa_ncheck+0x12>
 824:	99 23       	and	r25, r25
 826:	22 f4       	brpl	.+8      	; 0x830 <__itoa_ncheck+0x12>
 828:	bd e2       	ldi	r27, 0x2D	; 45
 82a:	90 95       	com	r25
 82c:	81 95       	neg	r24
 82e:	9f 4f       	sbci	r25, 0xFF	; 255
 830:	01 c0       	rjmp	.+2      	; 0x834 <__utoa_common>

00000832 <__utoa_ncheck>:
 832:	bb 27       	eor	r27, r27

00000834 <__utoa_common>:
 834:	fb 01       	movw	r30, r22
 836:	55 27       	eor	r21, r21
 838:	aa 27       	eor	r26, r26
 83a:	88 0f       	add	r24, r24
 83c:	99 1f       	adc	r25, r25
 83e:	aa 1f       	adc	r26, r26
 840:	a4 17       	cp	r26, r20
 842:	10 f0       	brcs	.+4      	; 0x848 <__utoa_common+0x14>
 844:	a4 1b       	sub	r26, r20
 846:	83 95       	inc	r24
 848:	50 51       	subi	r21, 0x10	; 16
 84a:	b9 f7       	brne	.-18     	; 0x83a <__utoa_common+0x6>
 84c:	a0 5d       	subi	r26, 0xD0	; 208
 84e:	aa 33       	cpi	r26, 0x3A	; 58
 850:	08 f0       	brcs	.+2      	; 0x854 <__utoa_common+0x20>
 852:	a9 5d       	subi	r26, 0xD9	; 217
 854:	a1 93       	st	Z+, r26
 856:	00 97       	sbiw	r24, 0x00	; 0
 858:	79 f7       	brne	.-34     	; 0x838 <__utoa_common+0x4>
 85a:	b1 11       	cpse	r27, r1
 85c:	b1 93       	st	Z+, r27
 85e:	11 92       	st	Z+, r1
 860:	cb 01       	movw	r24, r22
 862:	00 c0       	rjmp	.+0      	; 0x864 <strrev>

00000864 <strrev>:
 864:	dc 01       	movw	r26, r24
 866:	fc 01       	movw	r30, r24
 868:	67 2f       	mov	r22, r23
 86a:	71 91       	ld	r23, Z+
 86c:	77 23       	and	r23, r23
 86e:	e1 f7       	brne	.-8      	; 0x868 <strrev+0x4>
 870:	32 97       	sbiw	r30, 0x02	; 2
 872:	04 c0       	rjmp	.+8      	; 0x87c <strrev+0x18>
 874:	7c 91       	ld	r23, X
 876:	6d 93       	st	X+, r22
 878:	70 83       	st	Z, r23
 87a:	62 91       	ld	r22, -Z
 87c:	ae 17       	cp	r26, r30
 87e:	bf 07       	cpc	r27, r31
 880:	c8 f3       	brcs	.-14     	; 0x874 <strrev+0x10>
 882:	08 95       	ret

00000884 <_exit>:
 884:	f8 94       	cli

00000886 <__stop_program>:
 886:	ff cf       	rjmp	.-2      	; 0x886 <__stop_program>
